@startuml Airline_Management_System_Revised

' ==================== Styling Configuration ====================
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam backgroundColor #FEFEFE
skinparam roundcorner 10
skinparam shadowing false

' Class styling
skinparam class {
  BackgroundColor<<Abstract>> #E8F5E9
  BackgroundColor<<Enum>> #FFF3E0
  BackgroundColor<<Singleton>> #E3F2FD
  BackgroundColor<<Entity>> #F3E5F5
  BackgroundColor<<Controller>> #FFE0B2
  BackgroundColor<<Utility>> #E0F2F1
  BackgroundColor<<Exception>> #FFEBEE
  BackgroundColor<<Builder>> #FFF9C4
  BackgroundColor<<Validator>> #E1BEE7
  BorderColor #424242
  ArrowColor #616161
  FontName Arial
  FontSize 11
}

skinparam nodesep 60
skinparam ranksep 80
skinparam packageStyle rectangle

' ==================== Core Infrastructure ====================

package "Core Infrastructure" {
  class GridDisplayConfig {
    + title: string
    + headerLines: vector<string>
    + legend: vector<string>
    + footerLines: vector<string>
    + showSeparator: bool
  }

  class UserInterface <<Singleton>> <<Utility>> {
    + {static} getInstance(): UserInterface*
    + print(message: string): void
    + println(message: string): void
    + printError(message: string): void
    + printSuccess(message: string): void
    + printWarning(message: string): void
    + printHeader(header: string): void
    + printSeparator(): void
    + getString(prompt: string): string
    + getInt(prompt: string): int
    + getDouble(prompt: string): double
    + getPassword(prompt: string): string
    + getChoice(prompt: string, min: int, max: int): int
    + getYesNo(prompt: string): bool
    + getDate(prompt: string, format: string): string
    + clearScreen(): void
    + pauseScreen(): void
    + displayMenu(title: string, options: vector<string>): void
    + displayTable(headers: vector<string>, rows: vector<vector<string>>): void
    + displayGrid(rowLabels: vector<string>, gridData: vector<vector<string>>, config: GridDisplayConfig): void
    + formatCurrency(amount: double): string
  }

  class Database <<Utility>> {
    + Database(entityName: string)
    + loadAll(): json
    + saveAll(data: json): void
    + getEntry(entryKey: string): json
    + addEntry(entryKey: string, entryData: json): void
    + deleteEntry(entryKey: string): void
    + entryExists(entryKey: string): bool
    + updateEntry(entryKey: string, updates: json): void
    + getAttribute(entryKey: string, attributeKey: string): auto
    + setAttribute(entryKey: string, attributeKey: string, value: json): void
    + deleteAttribute(entryKey: string, attributeKey: string): void
    + attributeExists(entryKey: string, attributeKey: string): bool
    + getEntryCount(): int
    + isEmpty(): bool
    + clear(): void
  }

  enum DatabaseErrorCode <<Enum>> {
    FILE_NOT_FOUND
    FILE_READ_ERROR
    FILE_WRITE_ERROR
    INVALID_JSON
    ENTRY_NOT_FOUND
    ATTRIBUTE_NOT_FOUND
    DATABASE_ERROR
  }

  class DatabaseException <<Exception>> {
    + DatabaseException(code: DatabaseErrorCode)
    + what(): const char*
    + getErrorCode(): DatabaseErrorCode
  }
  
  enum UIErrorCode <<Enum>> {
    INVALID_INTEGER_INPUT
    INVALID_DOUBLE_INPUT
    INVALID_CHOICE
    INVALID_YES_NO_INPUT
    USER_CANCELED
    INVALID_PASSWORD_INPUT
  }
  
  class UIException <<Exception>> {
    + UIException(code: UIErrorCode)
    + what(): const char*
    + getErrorCode(): UIErrorCode
  }

  class AirlineManagementSystem <<Singleton>> <<Controller>> {
    + {static} getInstance(): shared_ptr<AirlineManagementSystem>
    + initialize(): void
    + start(): void
    + shutdown(): void
  }
  
  UserInterface --> GridDisplayConfig : uses
  UserInterface ..> UIException : throws
  UIException --> UIErrorCode
  Database ..> DatabaseException : throws
  DatabaseException --> DatabaseErrorCode
  AirlineManagementSystem --> UserInterface : uses
}

' ==================== User Management ====================

package "User Management" {
  enum UserRole <<Enum>> {
    ADMINISTRATOR
    BOOKING_AGENT
    PASSENGER
  }

  enum UserErrorCode <<Enum>> {
    USERNAME_TAKEN
    INVALID_USERNAME
    INVALID_PASSWORD
    USER_NOT_FOUND
    INCORRECT_PASSWORD
    DATABASE_ERROR
    INVALID_INPUTS
  }

  abstract class User <<Abstract>> {
    + {static} initializeUserSystem(): void
    + {static} login(username: string, password: string): unique_ptr<User>
    + {abstract} displayMenu(): void
    + {abstract} handleMenuChoice(choice: int): void
    + logout(): void
    + getUsername(): string
    + getName(): string
    + getRole(): UserRole
    + getEmail(): string
    + getPhoneNumber(): string
    + setName(name: string): void
    + setEmail(email: string): void
    + setPhoneNumber(phoneNumber: string): void
  }

  class Administrator {
    + displayMenu(): void
    + handleMenuChoice(choice: int): void
  }

  class BookingAgent {
    + displayMenu(): void
    + handleMenuChoice(choice: int): void
  }

  class Passenger {
    + displayMenu(): void
    + handleMenuChoice(choice: int): void
  }

  class UserException <<Exception>> {
    + UserException(code: UserErrorCode)
    + what(): const char*
    + getErrorCode(): UserErrorCode
  }
  
  User <|-- Administrator
  User <|-- BookingAgent
  User <|-- Passenger
  User --> UserRole
  User ..> UserException : throws
  User --> Database : uses
  User --> UserInterface : uses
  UserException --> UserErrorCode
}

' ==================== Seat Map Management ====================

package "Seat Map Management" {
  enum SeatMapErrorCode <<Enum>> {
    INVALID_SEAT
    SEAT_ALREADY_RESERVED
    SEAT_NOT_FOUND
    INVALID_LAYOUT
    INVALID_ROWS
  }

  class SeatMap <<Utility>> {
    + SeatMap(seatLayout: string, rows: int)
    + SeatMap(seatLayout: string, rows: int, reservedSeats: vector<string>)
    + {static} validateSeatLayout(layout: string): bool
    + {static} generateSeatMap(seatLayout: string, rows: int): vector<string>
    + {static} calculateSeatCount(seatLayout: string, rows: int): int
    + {static} getSeatsPerRow(seatLayout: string): int
    + {static} getSampleSeatMapDisplayData(seatLayout: string, rows: int, rowLabels: vector<string>&, gridData: vector<vector<string>>&, displayRows: int): void
    + {static} getSampleSeatMapFooter(seatLayout: string, rows: int): vector<string>
    + isValidSeat(seatNumber: string): bool
    + getAllSeats(): vector<string>
    + reserveSeat(seatNumber: string): bool
    + releaseSeat(seatNumber: string): bool
    + isSeatAvailable(seatNumber: string): bool
    + getReservedSeats(): vector<string>
    + getAvailableSeatsCount(): int
    + getTotalSeatsCount(): int
    + getSeatMapDisplayData(rowLabels: vector<string>&, gridData: vector<vector<string>>&): void
    + getSeatMapHeader(flightNumber: string, origin: string, destination: string, aircraftType: string): vector<string>
    + getSeatMapLegend(): vector<string>
    + getSeatMapFooter(): vector<string>
  }

  class SeatMapException <<Exception>> {
    + SeatMapException(code: SeatMapErrorCode)
    + SeatMapException(code: SeatMapErrorCode, info: string)
    + what(): const char*
    + getErrorCode(): SeatMapErrorCode
  }

  SeatMap ..> SeatMapException : throws
  SeatMapException --> SeatMapErrorCode
}

' ==================== Aircraft Management ====================

package "Aircraft Management" {
  enum AircraftErrorCode <<Enum>> {
    AIRCRAFT_NOT_FOUND
    AIRCRAFT_EXISTS
    INVALID_AIRCRAFT_TYPE
    INVALID_SEAT_LAYOUT
    INVALID_SEAT_COUNT
    INVALID_MANUFACTURER
    INVALID_MODEL
    INVALID_FLEET_COUNT
    DATABASE_ERROR
  }

  class Aircraft <<Entity>> {
    + getAircraftType(): string
    + getManufacturer(): string
    + getModel(): string
    + getTotalSeats(): int
    + getSeatLayout(): string
    + getRows(): int
    + getFleetCount(): int
    + getStatus(): string
    + setManufacturer(manufacturer: string): void
    + setModel(model: string): void
    + setTotalSeats(seats: int): void
    + setSeatLayout(layout: string): void
    + setRows(rows: int): void
    + setFleetCount(count: int): void
    + setStatus(status: string): void
  }

  class AircraftException <<Exception>> {
    + AircraftException(code: AircraftErrorCode)
    + AircraftException(code: AircraftErrorCode, message: string)
    + what(): const char*
    + getErrorCode(): AircraftErrorCode
  }
  
  class AircraftValidator <<Validator>> {
    + {static} isValidAircraftType(aircraftType: string): bool
    + {static} isValidManufacturer(manufacturer: string): bool
    + {static} isValidModel(model: string): bool
    + {static} isValidSeatLayout(seatLayout: string): bool
    + {static} isValidSeatCount(totalSeats: int): bool
    + {static} isValidRows(rows: int): bool
    + {static} isValidFleetCount(fleetCount: int): bool
  }
  
  enum AircraftValidationErrorCode <<Enum>> {
    INVALID_AIRCRAFT_TYPE
    INVALID_MANUFACTURER
    INVALID_MODEL
    INVALID_SEAT_LAYOUT
    INVALID_SEAT_COUNT
    INVALID_ROWS
    INVALID_FLEET_COUNT
  }
  
  class AircraftValidationException <<Exception>> {
    + AircraftValidationException(code: AircraftValidationErrorCode)
    + what(): const char*
    + getErrorCode(): AircraftValidationErrorCode
  }
  
  class AircraftCreator <<Builder>> {
    + createNewAircraft(): shared_ptr<Aircraft>
    + createFromJson(data: json): shared_ptr<Aircraft>
    + toJson(aircraft: shared_ptr<Aircraft>): json
  }
  
  class AircraftManager <<Singleton>> <<Controller>> {
    + {static} getInstance(): AircraftManager*
    + manageAircraft(): void
    + getAircraft(aircraftType: string): shared_ptr<Aircraft>
    + getAllAircraftTypes(): vector<string>
    + aircraftTypeExists(aircraftType: string): bool
    + {static} isAircraftUsedByFlights(aircraftType: string): bool
  }
  
  Aircraft ..> AircraftException : throws
  AircraftException --> AircraftErrorCode
  AircraftValidator ..> AircraftValidationException : throws
  AircraftValidationException --> AircraftValidationErrorCode
  AircraftCreator --> UserInterface : uses
  AircraftCreator --> AircraftValidator : uses
  AircraftCreator ..> Aircraft : creates
  AircraftCreator ..> AircraftValidationException : throws
  AircraftManager --> Database : uses
  AircraftManager --> UserInterface : uses
  AircraftManager --> AircraftCreator : uses
  AircraftManager ..> Aircraft : manages
  AircraftManager ..> SeatMap : uses
  AircraftManager ..> AircraftException : throws
}

' ==================== Flight Management ====================

package "Flight Management" {
  enum FlightErrorCode <<Enum>> {
    FLIGHT_NOT_FOUND
    FLIGHT_EXISTS
    INVALID_FLIGHT_NUMBER
    INVALID_AIRCRAFT_TYPE
    INVALID_ORIGIN
    INVALID_DESTINATION
    INVALID_DATE_FORMAT
    SEAT_OPERATION_FAILED
    DATABASE_ERROR
  }

  class Flight <<Entity>> {
    + getFlightNumber(): string
    + getOrigin(): string
    + getDestination(): string
    + getDepartureDateTime(): string
    + getArrivalDateTime(): string
    + getAircraftType(): string
    + getStatus(): string
    + getPrice(): double
    + getTotalSeats(): int
    + getAvailableSeats(): int
    + getGate(): string
    + getBoardingTime(): string
    + getReservedSeats(): vector<string>
    + setOrigin(origin: string): void
    + setDestination(destination: string): void
    + setDepartureDateTime(departureDateTime: string): void
    + setArrivalDateTime(arrivalDateTime: string): void
    + setAircraftType(aircraftType: string): void
    + setStatus(status: string): void
    + setPrice(price: double): void
    + setGate(gate: string): void
    + setBoardingTime(boardingTime: string): void
    + reserveSeat(seatNumber: string): bool
    + releaseSeat(seatNumber: string): bool
    + isSeatAvailable(seatNumber: string): bool
  }

  class FlightException <<Exception>> {
    + FlightException(code: FlightErrorCode)
    + FlightException(code: FlightErrorCode, message: string)
    + what(): const char*
    + getErrorCode(): FlightErrorCode
  }
  
  class FlightValidator <<Validator>> {
    + {static} isValidFlightNumber(flightNumber: string): bool
    + {static} isValidOrigin(origin: string): bool
    + {static} isValidDestination(destination: string): bool
    + {static} isValidDateTime(dateTime: string): bool
    + {static} isValidPrice(price: double): bool
  }
  
  enum FlightValidationErrorCode <<Enum>> {
    INVALID_FLIGHT_NUMBER
    INVALID_ORIGIN
    INVALID_DESTINATION
    INVALID_DATE_TIME
    INVALID_PRICE
    NO_AIRCRAFT_TYPES_AVAILABLE
  }
  
  class FlightValidationException <<Exception>> {
    + FlightValidationException(code: FlightValidationErrorCode)
    + what(): const char*
    + getErrorCode(): FlightValidationErrorCode
  }
  
  class FlightCreator <<Builder>> {
    + createNewFlight(): shared_ptr<Flight>
    + createFromJson(data: json): shared_ptr<Flight>
    + toJson(flight: shared_ptr<Flight>): json
  }
  
  class FlightManager <<Singleton>> <<Controller>> {
    + {static} getInstance(): FlightManager*
    + manageFlights(): void
    + getFlight(flightNumber: string): shared_ptr<Flight>
    + searchFlightsByRoute(origin: string, destination: string, departureDate: string): vector<shared_ptr<Flight>>
    + getAllFlightNumbers(): vector<string>
    + flightExists(flightNumber: string): bool
    + {static} hasActiveReservations(flightNumber: string): bool
  }
  
  Flight ..> FlightException : throws
  FlightException --> FlightErrorCode
  FlightValidator ..> FlightValidationException : throws
  FlightValidationException --> FlightValidationErrorCode
  FlightCreator --> UserInterface : uses
  FlightCreator --> FlightValidator : uses
  FlightCreator ..> Flight : creates
  FlightCreator ..> FlightValidationException : throws
  FlightCreator ..> AircraftManager : queries
  FlightManager --> Database : uses
  FlightManager --> UserInterface : uses
  FlightManager --> FlightCreator : uses
  FlightManager ..> Flight : manages
  FlightManager ..> AircraftManager : queries
  FlightManager ..> SeatMap : uses
  FlightManager ..> FlightException : throws
}

' ==================== Crew Management ====================

package "Crew Management" {
  enum CrewRole <<Enum>> {
    PILOT
    FLIGHT_ATTENDANT
  }

  class CrewMember <<Entity>> {
    + getCrewId(): string
    + getName(): string
    + getRole(): CrewRole
    + getLicenseNumber(): string
    + getFlightHours(): double
    + getAssignedFlights(): vector<string>
    + setName(name: string): void
    + setLicenseNumber(license: string): void
    + addFlightHours(hours: double): void
    + canBeAssigned(date: string): bool
  }
  
  CrewMember --> CrewRole
}

' ==================== Booking System ====================

package "Booking System" {
  enum ReservationStatus <<Enum>> {
    PENDING
    CONFIRMED
    CHECKED_IN
    BOARDED
    COMPLETED
    CANCELED
  }

  class Reservation <<Entity>> {
    + getReservationId(): string
    + getPassengerUsername(): string
    + getPassengerName(): string
    + getFlightNumber(): string
    + getSeatNumber(): string
    + getStatus(): ReservationStatus
    + getBookingDate(): string
    + getTotalCost(): double
    + getPaymentId(): string
    + confirmReservation(): void
    + cancelReservation(): void
    + checkIn(): void
    + setStatus(status: ReservationStatus): void
  }

  enum PaymentMethod <<Enum>> {
    CREDIT_CARD
    DEBIT_CARD
    CASH
    PAYPAL
  }

  enum TransactionStatus <<Enum>> {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
  }

  class Payment {
    + getPaymentId(): string
    + getReservationId(): string
    + getAmount(): double
    + getPaymentMethod(): PaymentMethod
    + getTransactionStatus(): TransactionStatus
    + getPaymentDate(): string
    + processPayment(): bool
    + refund(): bool
  }

  class BoardingPass {
    + getBoardingPassId(): string
    + getReservationId(): string
    + getPassengerName(): string
    + getFlightNumber(): string
    + getSeatNumber(): string
    + getGate(): string
    + getBoardingTime(): string
    + verify(): bool
  }

  class CheckInSystem {
    + {static} checkInPassenger(reservationId: string): unique_ptr<BoardingPass>
    + {static} verifyBoardingPass(boardingPassId: string): bool
  }
  
  Reservation --> ReservationStatus
  Payment --> PaymentMethod
  Payment --> TransactionStatus
  CheckInSystem ..> BoardingPass : creates
}

' ==================== Reporting ====================

package "Reporting" {
  class ReportGenerator <<Controller>> {
    + {static} generateReports(): void
  }
  
  ReportGenerator --> UserInterface : uses
}

' ==================== Cross-Package Relationships ====================

' System orchestrates major components
AirlineManagementSystem --> AircraftManager : delegates to
AirlineManagementSystem --> ReportGenerator : delegates to

' User classes interact with managers
Administrator --> AirlineManagementSystem : uses
Administrator --> FlightManager : uses
Administrator --> AircraftManager : uses
BookingAgent --> FlightManager : uses
Passenger --> FlightManager : uses

' Manager relationships
AircraftManager ..> FlightManager : checks usage
FlightManager ..> AircraftManager : queries aircraft

' Data flow relationships
Reservation --> FlightManager : queries
Reservation --> Payment : has
BoardingPass --> Reservation : generated from
CrewMember ..> FlightManager : assigned to

note top of AirlineManagementSystem
  **Singleton Pattern - Central Orchestrator**
  - Handles system initialization
  - Manages main program loop
  - Delegates to domain-specific managers
  - Does NOT store domain data
end note

note right of SeatMap
  **Pure Business Logic Class**
  - NO database or UI dependencies
  - Validates seat layouts and numbers
  - Manages seat reservations in memory
  - Returns display data structures
  - Used by Aircraft and Flight managers
end note

note right of FlightManager
  **Manager Pattern - Flight Domain**
  Database: Flights.json
  - Manages all flight operations
  - Uses FlightCreator for validation/creation
  - Queries AircraftManager for aircraft data
  - Creates SeatMap instances with reservations
  - Handles business logic and menus
end note

note right of AircraftManager
  **Manager Pattern - Aircraft Domain**
  Database: Aircrafts.json
  - Manages all aircraft type operations
  - Uses AircraftCreator for validation/creation
  - Checks flight usage before deletion
  - Handles business logic and menus
  - Stores aircraft TYPE specifications only
end note

note left of FlightCreator
  **Builder Pattern**
  - Encapsulates Flight construction
  - Validates all input fields
  - Prompts user for data via UI
  - Handles JSON serialization/deserialization
  - Friend of Flight and FlightManager
end note

note left of AircraftCreator
  **Builder Pattern**
  - Encapsulates Aircraft construction
  - Validates all input fields
  - Prompts user for data via UI
  - Handles JSON serialization/deserialization
  - Friend of Aircraft and AircraftManager
end note

note left of Database
  **Caching Strategy**
  - Loads entire JSON on construction
  - Keeps unique_ptr<json> in memory
  - All reads from cached data
  - Writes to file on every change
  - Ensures file consistency on crash
  - Manages "Databases/" path prefix
end note

note bottom of User
  **User Management**
  Database: Users.json
  - Username as primary key
  - Role-based polymorphism
  - Password hashing for security
  - First-time setup creates admin
  - Static database initialization
end note

@enduml