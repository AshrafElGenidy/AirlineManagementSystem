@startuml Airline_Management_System_Revised

' ==================== Styling Configuration ====================
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam backgroundColor #FEFEFE
skinparam roundcorner 10
skinparam shadowing false

' Class styling
skinparam class {
  BackgroundColor<<Abstract>> #E8F5E9
  BackgroundColor<<Enum>> #FFF3E0
  BackgroundColor<<Singleton>> #E3F2FD
  BackgroundColor<<Entity>> #F3E5F5
  BackgroundColor<<Controller>> #FFE0B2
  BackgroundColor<<Utility>> #E0F2F1
  BorderColor #424242
  ArrowColor #616161
  FontName Arial
  FontSize 11
}

skinparam nodesep 60
skinparam ranksep 80
skinparam packageStyle rectangle

' ==================== Core Infrastructure ====================

package "Core Infrastructure" {
  class UserInterface <<Singleton>> <<Utility>> {
    + {static} getInstance(): UserInterface*
    + print(message: string): void
    + println(message: string): void
    + printError(message: string): void
    + printSuccess(message: string): void
    + printWarning(message: string): void
    + printHeader(header: string): void
    + printSeparator(): void
    + getString(prompt: string): string
    + getInt(prompt: string): int
    + getDouble(prompt: string): double
    + getPassword(prompt: string): string
    + getChoice(prompt: string, min: int, max: int): int
    + getYesNo(prompt: string): bool
    + getDate(prompt: string, format: string): string
    + clearScreen(): void
    + pauseScreen(): void
    + displayMenu(title: string, options: vector<string>): void
    + displayTable(headers: vector<string>, rows: vector<vector<string>>): void
    + formatCurrency(amount: double): string
  }

  class AirlineManagementSystem <<Singleton>> <<Controller>> {
    + {static} getInstance(): shared_ptr<AirlineManagementSystem>
    + initialize(): void
    + start(): void
    + displayWelcome(): void
    + manageFlights(): void
    + manageAircraft(): void
    + generateReports(): void
    + shutdown(): void
  }
  
  AirlineManagementSystem --> UserInterface : uses
}

' ==================== User Management ====================

package "User Management" {
  enum UserRole <<Enum>> {
    ADMINISTRATOR
    BOOKING_AGENT
    PASSENGER
  }

  enum UserErrorCode <<Enum>> {
    USERNAME_TAKEN
    INVALID_USERNAME
    INVALID_PASSWORD
    USER_NOT_FOUND
    INCORRECT_PASSWORD
    DATABASE_ERROR
    INVALID_INPUTS
  }

  abstract class User <<Abstract>> {
    + User(username: string, password: string, role: UserRole)
    + User(username: string)
    + {abstract} displayMenu(): void
    + {abstract} handleMenuChoice(choice: int): void
    + {static} initializeUserSystem(): void
    + {static} login(username: string, password: string): unique_ptr<User>
    + logout(): void
    + getUsername(): string
    + getName(): string
    + getRole(): UserRole
    + getEmail(): string
    + getPhoneNumber(): string
    + setName(name: string): void
    + setEmail(email: string): void
    + setPhoneNumber(phoneNumber: string): void
  }

  class Administrator {
    + Administrator(username: string, password: string)
    + Administrator(username: string)
    + displayMenu(): void
    + handleMenuChoice(choice: int): void
  }

  class BookingAgent {
    + BookingAgent(username: string, password: string)
    + BookingAgent(username: string)
    + displayMenu(): void
    + handleMenuChoice(choice: int): void
  }

  class Passenger {
    + Passenger(username: string, password: string)
    + Passenger(username: string)
    + displayMenu(): void
    + handleMenuChoice(choice: int): void
    + viewBookingHistory(): void
    + viewCurrentBookings(): void
    + viewBoardingPasses(): void
  }

  class UserException {
    + UserException(code: UserErrorCode)
    + what(): const char*
    + getErrorCode(): UserErrorCode
  }
  
  User <|-- Administrator
  User <|-- BookingAgent
  User <|-- Passenger
  User --> UserRole
  User ..> UserException : throws
  UserException --> UserErrorCode
}

' ==================== Flight Management ====================

package "Flight Management" {
  enum FlightStatus <<Enum>> {
    SCHEDULED
    DELAYED
    BOARDING
    DEPARTED
    ARRIVED
    CANCELED
  }

  enum FlightErrorCode <<Enum>> {
    FLIGHT_NOT_FOUND
    FLIGHT_EXISTS
    INVALID_FLIGHT_NUMBER
    DATABASE_ERROR
  }

  class Flight <<Entity>> {
    + Flight()
    + Flight(flightNumber: string)
    + {static} initializeFlightSystem(): void
    + {static} manageFlights(): void
    + {static} searchFlights(origin: string, destination: string, date: string): vector<unique_ptr<Flight>>
    + getFlightNumber(): string
    + getOrigin(): string
    + getDestination(): string
    + getDepartureDateTime(): string
    + getArrivalDateTime(): string
    + getAircraftType(): string
    + getStatus(): string
    + getPrice(): double
    + getTotalSeats(): int
    + getAvailableSeats(): int
    + getReservedSeats(): vector<string>
    + getGate(): string
    + getBoardingTime(): string
    + setStatus(status: string): void
    + setPrice(price: double): void
    + setGate(gate: string): void
    + setBoardingTime(boardingTime: string): void
    + reserveSeat(seatNumber: string): bool
    + releaseSeat(seatNumber: string): bool
    + isSeatAvailable(seatNumber: string): bool
    + displayFlightInfo(): void
  }

  class FlightException {
    + FlightException(code: FlightErrorCode)
    + what(): const char*
    + getErrorCode(): FlightErrorCode
  }
  
  Flight --> FlightStatus
  Flight ..> FlightException : throws
  FlightException --> FlightErrorCode
}

' ==================== Aircraft Management ====================

package "Aircraft Management" {
  enum AircraftStatus <<Enum>> {
    AVAILABLE
    IN_FLIGHT
    MAINTENANCE
    OUT_OF_SERVICE
  }

  class Aircraft <<Entity>> {
    + Aircraft()
    + Aircraft(aircraftType: string)
    + {static} initializeAircraftSystem(): void
    + {static} manageAircraft(): void
    + {static} getAllAircraftTypes(): vector<string>
    + getAircraftType(): string
    + getManufacturer(): string
    + getModel(): string
    + getTotalSeats(): int
    + getSeatLayout(): string
    + getFleetCount(): int
    + getAvailableCount(): int
    + setManufacturer(manufacturer: string): void
    + setModel(model: string): void
    + setTotalSeats(seats: int): void
    + setSeatLayout(layout: string): void
    + incrementFleet(): void
    + decrementFleet(): void
    + displayAircraftInfo(): void
    + generateSeatMap(): vector<string>
  }

  enum MaintenanceType <<Enum>> {
    SCHEDULED
    UNSCHEDULED
    INSPECTION
    REPAIR
    OVERHAUL
  }

  class MaintenanceLog {
    + MaintenanceLog(aircraftId: string, type: MaintenanceType, description: string)
    + {static} addMaintenanceLog(aircraftType: string, log: MaintenanceLog): void
    + {static} getMaintenanceLogs(aircraftType: string): vector<MaintenanceLog>
    + getLogId(): string
    + getAircraftId(): string
    + getMaintenanceDate(): string
    + getMaintenanceType(): MaintenanceType
    + getDescription(): string
    + getCost(): double
    + displayLog(): void
  }
  
  Aircraft --> AircraftStatus
  MaintenanceLog --> MaintenanceType
}

' ==================== Crew Management ====================

package "Crew Management" {
  enum CrewRole <<Enum>> {
    PILOT
    FLIGHT_ATTENDANT
  }

  class CrewMember <<Entity>> {
    + CrewMember()
    + CrewMember(crewId: string)
    + {static} initializeCrewSystem(): void
    + {static} manageCrew(): void
    + {static} getAvailableCrew(role: CrewRole, date: string): vector<unique_ptr<CrewMember>>
    + {static} assignCrewToFlight(crewId: string, flightNumber: string): bool
    + {static} unassignCrewFromFlight(crewId: string, flightNumber: string): bool
    + getCrewId(): string
    + getName(): string
    + getRole(): CrewRole
    + getLicenseNumber(): string
    + getFlightHours(): double
    + getAssignedFlights(): vector<string>
    + setName(name: string): void
    + setLicenseNumber(license: string): void
    + addFlightHours(hours: double): void
    + canBeAssigned(date: string): bool
    + displayInfo(): void
  }
  
  CrewMember --> CrewRole
}

' ==================== Booking System ====================

package "Booking System" {
  enum ReservationStatus <<Enum>> {
    PENDING
    CONFIRMED
    CHECKED_IN
    BOARDED
    COMPLETED
    CANCELED
  }

  class Reservation <<Entity>> {
    + Reservation(passengerUsername: string, flightNumber: string, seatNumber: string)
    + Reservation(reservationId: string)
    + {static} initializeReservationSystem(): void
    + {static} getPassengerReservations(passengerUsername: string): vector<unique_ptr<Reservation>>
    + {static} getFlightReservations(flightNumber: string): vector<unique_ptr<Reservation>>
    + getReservationId(): string
    + getPassengerUsername(): string
    + getPassengerName(): string
    + getFlightNumber(): string
    + getSeatNumber(): string
    + getStatus(): ReservationStatus
    + getBookingDate(): string
    + getTotalCost(): double
    + getPaymentId(): string
    + confirmReservation(): void
    + cancelReservation(): void
    + checkIn(): void
    + setStatus(status: ReservationStatus): void
    + displayReservationInfo(): void
  }

  enum PaymentMethod <<Enum>> {
    CREDIT_CARD
    DEBIT_CARD
    CASH
    PAYPAL
  }

  enum TransactionStatus <<Enum>> {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
  }

  class Payment {
    + Payment(reservationId: string, amount: double, method: PaymentMethod)
    + Payment(paymentId: string)
    + {static} initializePaymentSystem(): void
    + getPaymentId(): string
    + getReservationId(): string
    + getAmount(): double
    + getPaymentMethod(): PaymentMethod
    + getTransactionStatus(): TransactionStatus
    + getPaymentDate(): string
    + processPayment(): bool
    + refund(): bool
    + displayPaymentInfo(): void
  }

  class BoardingPass {
    + BoardingPass(reservationId: string)
    + {static} generateBoardingPass(reservationId: string): unique_ptr<BoardingPass>
    + getBoardingPassId(): string
    + getReservationId(): string
    + getPassengerName(): string
    + getFlightNumber(): string
    + getSeatNumber(): string
    + getGate(): string
    + getBoardingTime(): string
    + displayBoardingPass(): void
    + verify(): bool
  }

  class CheckInSystem {
    + {static} checkInPassenger(reservationId: string): unique_ptr<BoardingPass>
    + {static} verifyBoardingPass(boardingPassId: string): bool
  }
  
  Reservation --> ReservationStatus
  Payment --> PaymentMethod
  Payment --> TransactionStatus
  CheckInSystem ..> BoardingPass : creates
}

' ==================== Reporting ====================

package "Reporting" {
  class ReportGenerator <<Controller>> {
    + {static} generateReports(): void
    + {static} generateFlightReport(): void
    + {static} generateRevenueReport(): void
    + {static} generateMaintenanceReport(): void
    + {static} generateCrewUtilizationReport(): void
  }
  
  ReportGenerator --> UserInterface : uses
}

' ==================== Cross-Package Relationships ====================

' System orchestrates major components
AirlineManagementSystem --> Flight : delegates to
AirlineManagementSystem --> Aircraft : delegates to
AirlineManagementSystem --> ReportGenerator : delegates to

' User classes interact with system
Administrator --> AirlineManagementSystem : uses
BookingAgent --> AirlineManagementSystem : uses
Passenger --> AirlineManagementSystem : uses

' Data flow relationships
Flight ..> Aircraft : queries seat info
Reservation --> Flight : references
Reservation --> Payment : has
BoardingPass --> Reservation : generated from
CrewMember ..> Flight : assigned to

' All entity classes use UserInterface
Flight ..> UserInterface : uses
Aircraft ..> UserInterface : uses
CrewMember ..> UserInterface : uses
Reservation ..> UserInterface : uses
Payment ..> UserInterface : uses
BoardingPass ..> UserInterface : uses

note top of AirlineManagementSystem
  **Singleton Pattern - Central Orchestrator**
  - Does NOT store domain data
  - Delegates operations to domain classes
  - Each domain class manages its own JSON
  - manageFlights() -> Flight::manageFlights()
  - manageAircraft() -> Aircraft::manageAircraft()
  - generateReports() -> ReportGenerator::generateReports()
end note

note right of Flight
  **Self-Managing Entity**
  Database: Flights.json
  Structure: {
    "FL123": {
      "origin": "NYC",
      "destination": "LAX",
      "aircraftType": "Boeing737",
      "reservedSeats": ["1A", "2B"],
      ...
    }
  }
  - Queries Aircraft for total seats
  - Manages seat reservations per flight
  - Tracks which specific seats are reserved
end note

note right of Aircraft
  **Aircraft Type Registry**
  Database: Aircraft.json
  Structure: {
    "Boeing737": {
      "manufacturer": "Boeing",
      "model": "737-800",
      "totalSeats": 180,
      "seatLayout": "3-3",
      "fleetCount": 15,
      ...
    }
  }
  - Stores aircraft TYPE specifications
  - Defines seat capacity per type
  - Tracks fleet size per type
  - Generates seat maps for seat selection
end note

note right of CrewMember
  **Crew Registry with Flight Assignments**
  Database: Crew.json
  Structure: {
    "P001": {
      "name": "John Doe",
      "role": "PILOT",
      "assignedFlights": ["FL123", "FL456"],
      "flightHours": 2500,
      ...
    }
  }
  - Each crew member tracks assigned flights
  - Flight class can query available crew
  - Validation for max flight hours
end note

note left of Reservation
  **Booking Records**
  Database: Reservations.json
  Structure: {
    "RES001": {
      "passengerUsername": "john_doe",
      "flightNumber": "FL123",
      "seatNumber": "12A",
      "status": "CONFIRMED",
      "paymentId": "PAY001",
      ...
    }
  }
  - Links passenger to flight + seat
  - Coordinates with Flight for seat availability
  - Triggers Payment creation
  - Passengers query by username
end note

note bottom of User
  **User Management**
  Database: Users.json
  Structure: {
    "john_doe": {
      "passwordHash": "...",
      "role": 2,
      "name": "John Doe",
      "email": "john@example.com",
      ...
    }
  }
  - Username as primary key
  - Role-based polymorphism
  - Passengers can view their reservations
end note

@enduml