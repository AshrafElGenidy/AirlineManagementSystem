@startuml Airline_Management_System

' ==================== Styling Configuration ====================
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam backgroundColor #FEFEFE
skinparam roundcorner 10
skinparam shadowing false
skinparam nodesep 120
skinparam ranksep 130
skinparam minClassWidth 120

' Class styling
skinparam class {
  BackgroundColor<<Abstract>> #E8F5E9
  BackgroundColor<<Singleton>> #E3F2FD
  BackgroundColor<<Entity>> #F3E5F5
  BackgroundColor<<Controller>> #FFE0B2
  BackgroundColor<<Utility>> #E0F2F1
  BackgroundColor<<Builder>> #FFF9C4
  BorderColor #424242
  ArrowColor #616161
  FontName Arial
  FontSize 9
}

' Entry Point
class AirlineManagementSystem <<Singleton>> <<Controller>> {
  - ui: UserInterface*
  - usersManager: UsersManager*
  - currentUser: shared_ptr<User>
  ---
  + {static} getInstance(): AirlineManagementSystem*
  + runSystem(): void
  + shutdown(): void
}

' User Management
abstract class User <<Abstract>> {
  # username: string
  # name: string
  # email: string
  # phoneNumber: string
  # role: UserRole
  ---
  + getters
  + setters
  + {abstract} userMenu(): void
  + {abstract} getRoleString(): string
}

class Administrator <<Entity>> {
  + userMenu(): void
  + getRoleString(): string
}

class BookingAgent <<Entity>> {
  + userMenu(): void
  + getRoleString(): string
}

class Passenger <<Entity>> {
  + userMenu(): void
  + getRoleString(): string
}

class UsersManager <<Singleton>> <<Controller>> {
  - db: unique_ptr<Database>
  - ui: UserInterface*
  ---
  + {static} getInstance(): UsersManager*
  + login(username: string, password: string): shared_ptr<User>
  + manageUsers(): void
  + getUser(username: string): shared_ptr<User>
  + getAllUsers(): vector<shared_ptr<User>>
}

' Aircraft Management
class Aircraft <<Entity>> {
  - aircraftType: string
  - manufacturer: string
  - model: string
  - totalSeats: int
  - seatLayout: string
  - rows: int
  - fleetCount: int
  - status: string
  ---
  + getters
  + setters
}

class AircraftCreator <<Builder>> {
  - ui: UserInterface*
  ---
  + createNewAircraft(): shared_ptr<Aircraft>
  + createFromJson(aircraftType: string, data: json): shared_ptr<Aircraft>
  + toJson(aircraft: shared_ptr<Aircraft>): json
}

class AircraftManager <<Singleton>> <<Controller>> {
  - db: unique_ptr<Database>
  - ui: UserInterface*
  - creator: unique_ptr<AircraftCreator>
  ---
  + {static} getInstance(): AircraftManager*
  + manageAircraft(): void
  + getAircraft(aircraftType: string): shared_ptr<Aircraft>
  + getAllAircraftTypes(): vector<string>
  + aircraftTypeExists(aircraftType: string): bool
}

class Maintenance <<Singleton>> <<Controller>> {
  - db: unique_ptr<Database>
  - ui: UserInterface*
  ---
  + {static} getInstance(): Maintenance*
  + scheduleMaintenance(aircraftType: string): MaintenanceResult
  + completeMaintenance(aircraftType: string): MaintenanceResult
  + cancelMaintenance(aircraftType: string): MaintenanceResult
  + getAllMaintenance(): vector<json>
}

' Crew Management
class Crew <<Entity>> {
  - crewId: string
  - name: string
  - role: CrewRole
  - status: CrewStatus
  - totalFlightHours: double
  ---
  + getters
  + setters
}

class CrewManager <<Singleton>> <<Controller>> {
  - db: unique_ptr<Database>
  - ui: UserInterface*
  ---
  + {static} getInstance(): CrewManager*
  + manageCrew(): void
  + getCrew(crewId: string): shared_ptr<Crew>
  + getAvailableCrew(role: CrewRole): vector<shared_ptr<Crew>>
  + markCrewAsAssigned(crewId: string): void
  + addFlightHoursForCrew(crewId: string, hours: double): void
}

' Flight Management
class SeatMap <<Utility>> {
  - seatLayout: string
  - rows: int
  - reservedSeats: vector<string>
  ---
  + {static} validateSeatLayout(layout: string): bool
  + {static} generateSeatMap(seatLayout: string, rows: int): vector<string>
  + reserveSeat(seatNumber: string): bool
  + releaseSeat(seatNumber: string): bool
  + isSeatAvailable(seatNumber: string): bool
}

class Flight <<Entity>> {
  - flightNumber: string
  - origin: string
  - destination: string
  - departureDateTime: string
  - arrivalDateTime: string
  - aircraftType: string
  - status: string
  - price: double
  - reservedSeats: vector<string>
  - assignedCrewIds: vector<string>
  ---
  + getters
  + setters
  + reserveSeat(seatNumber: string): bool
  + addCrewMember(crewId: string): void
}

class FlightCreator <<Builder>> {
  - ui: UserInterface*
  ---
  + createNewFlight(): shared_ptr<Flight>
  + createFromJson(flightNumber: string, data: json): shared_ptr<Flight>
  + toJson(flight: shared_ptr<Flight>): json
}

class FlightManager <<Singleton>> <<Controller>> {
  - db: unique_ptr<Database>
  - ui: UserInterface*
  - creator: unique_ptr<FlightCreator>
  ---
  + {static} getInstance(): FlightManager*
  + manageFlights(): void
  + getFlight(flightNumber: string): shared_ptr<Flight>
  + searchFlightsByRoute(...): vector<shared_ptr<Flight>>
  + reserveSeatForFlight(flightNumber: string, seatNumber: string): bool
  + releaseSeatForFlight(flightNumber: string, seatNumber: string): bool
}

' Reservation Management
class Reservation <<Entity>> {
  - reservationId: string
  - passengerUsername: string
  - flightNumber: string
  - seatNumber: string
  - status: ReservationStatus
  - bookingDate: string
  - totalCost: double
  - bookedByAgent: string
  - checkedIn: bool
  ---
  + getters
  + setters
}

class ReservationManager <<Singleton>> <<Controller>> {
  - db: unique_ptr<Database>
  - ui: UserInterface*
  ---
  + {static} getInstance(): ReservationManager*
  + createReservation(agentUsername: string): void
  + modifyReservation(agentUsername: string): void
  + cancelReservation(agentUsername: string): void
  + checkIn(passengerUsername: string): void
  + getAllReservations(): vector<shared_ptr<Reservation>>
}

' Utils
class Database <<Utility>> {
  - cachedData: json
  ---
  + loadAll(): json
  + saveAll(data: json): void
  + getEntry(key: string): json
  + addEntry(key: string, data: json): void
  + deleteEntry(key: string): void
  + updateEntry(key: string, updates: json): void
  + entryExists(key: string): bool
}

class UserInterface <<Utility>> {
  ---
  + getString(prompt: string): string
  + getInt(prompt: string): int
  + getDouble(prompt: string): double
  + getChoice(prompt: string, min: int, max: int): int
  + getYesNo(prompt: string): bool
  + displayTable(...): void
  + displayGrid(...): void
  + displayMenu(title: string, options: vector<string>): void
  + formatCurrency(amount: double): string
}

' Reporting
class ReportGenerator <<Controller>> {
  - ui: UserInterface*
  ---
  + generateReports(): void
  + generateFlightPerformanceReport(): void
  + generateRevenueReport(): void
  + generateReservationStatisticsReport(): void
  + generateCrewSummaryReport(): void
  + generateMaintenanceSummaryReport(): void
}

' Relationships
Administrator --|> User
BookingAgent --|> User
Passenger --|> User

UsersManager --> User : creates

AircraftCreator --> Aircraft : creates
AircraftManager --> Aircraft : manages
AircraftManager --> AircraftCreator : uses
AircraftManager --> Maintenance : coordinates

CrewManager --> Crew : manages

FlightCreator --> Flight : creates
FlightCreator --> SeatMap : uses
FlightManager --> Flight : manages
FlightManager --> FlightCreator : uses
FlightManager --> SeatMap : uses

ReservationManager --> Reservation : manages

AirlineManagementSystem --> UsersManager : uses
AirlineManagementSystem --> Administrator : delegates
AirlineManagementSystem --> BookingAgent : delegates
AirlineManagementSystem --> Passenger : delegates

Administrator --> AircraftManager : accesses
Administrator --> FlightManager : accesses
Administrator --> CrewManager : accesses
Administrator --> ReservationManager : accesses
Administrator --> ReportGenerator : uses

BookingAgent --> FlightManager : accesses
BookingAgent --> ReservationManager : accesses
BookingAgent --> UsersManager : creates passengers

Passenger --> FlightManager : accesses
Passenger --> ReservationManager : accesses

FlightManager --> AircraftManager : queries aircraft
FlightManager --> CrewManager : assigns crew

ReservationManager --> FlightManager : reserves seats

ReportGenerator --> FlightManager : queries
ReportGenerator --> ReservationManager : queries
ReportGenerator --> CrewManager : queries
ReportGenerator --> AircraftManager : queries
ReportGenerator --> Maintenance : queries

@enduml